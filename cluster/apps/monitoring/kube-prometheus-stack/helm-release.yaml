---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 36.0.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  values:
    alertmanager:
      ingress:
        enabled: false
      config:
        global:
          resolve_timeout: 5m
        receivers:
        - name: 'null'
        - name: 'discord_webhook'
          webhook_configs:
          - url: 'http://alertmanager-discord.monitoring.svc.cluster.local:9094'
        route:
          group_by: ['alertname', 'job']
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: 'discord_webhook'
          routes:
          - receiver: 'null'
            match:
              alertname: Watchdog
          - receiver: 'discord_webhook'
    grafana:
      enabled: true
      admin:
        existingSecret: "grafana-admin-secret"
        userKey: admin-user
        passwordKey: admin-password
      persistence:
        type: pvc
        enabled: true
        storageClassName: nfs-client
        accessModes:
          - ReadWriteOnce
        size: 5Gi
        # annotations: {}
        #finalizers:
        #  - kubernetes.io/pvc-protection
        # selectorLabels: {}
        # subPath: ""
        # existingClaim:
      ingress:
        enabled: true
        annotations:
          ingress.kubernetes.io/ssl-redirect: "true"
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - grafana.${SECRET_DOMAIN}
        path: /
        tls:
        - secretName: grafana-${SECRET_DOMAIN}
          hosts:
          - grafana.${SECRET_DOMAIN}
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
          - name: "default"
            orgId: 1
            folder: ""
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default
      dashboards:
        default:
          # # Ref: https://grafana.com/grafana/dashboards/13502
          # minio:
          #   gnetId: 13502
          #   revision: 10
          #   datasource: Prometheus
          flux-cluster:
            url: https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/grafana/dashboards/cluster.json
            datasource: Prometheus
          flux-control-plane:
            url: https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/grafana/dashboards/control-plane.json
            datasource: Prometheus
    kubeApiServer:
      enabled: true
    kubelet:
      enabled: true
    kubeControllerManager:
      enabled: false
    coreDns:
      enabled: true
    kubeDns:
      enabled: false
    kubeEtcd:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeProxy:
      enabled: false
    kubeStateMetrics:
      enabled: true
    nodeExporter:
      enabled: true
    prometheus:
      enabled: true
      prometheusSpec:
        # To scrape all pod monitors (incuding the one we created in flux-system)
        # see https://github.com/prometheus-operator/kube-prometheus/issues/181
        podMonitorSelectorNilUsesHelmValues: false
      ingress:
        enabled: true
        annotations:
          ingress.kubernetes.io/ssl-redirect: "true"
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        labels: {}
        hosts:
          - prometheus.${SECRET_DOMAIN}
        paths:
        - /
        tls:
          - secretName: prometheus-${SECRET_DOMAIN}
            hosts:
              - prometheus.${SECRET_DOMAIN}
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: nfs-client
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi
          selector: {}
